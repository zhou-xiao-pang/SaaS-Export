package cn.itcast.service.cargo.impl;import cn.itcast.dao.cargo.*;import cn.itcast.domain.cargo.*;import cn.itcast.domain.vo.ExportProductResult;import cn.itcast.domain.vo.ExportResult;import cn.itcast.service.cargo.ExportService;import com.alibaba.dubbo.config.annotation.Service;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import java.util.*;@Servicepublic class ExportServiceImpl implements ExportService {    @Autowired    private ExportDao exportDao;    @Autowired    private ContractDao contractDao;    @Autowired    private ProductDao productDao;    @Autowired    private ExportProductDao exportProductDao;    @Autowired    private ExtEproductDao extEproductDao;    @Autowired    private ExtCproductDao extCproductDao;    @Override    public Export findById(String id) {        return exportDao.selectByPrimaryKey(id);    }    @Override    public void save(Export export) {        //设置报运单的id        export.setId(UUID.randomUUID().toString());        //设置报运单状态为草稿        export.setState(0);        int proNum = 0;//商品数量        int extNum = 0;//附件数量        String[] cIds = export.getContractIds().split(",");        for (String cId : cIds) {            //根据传来的合同ids修改合同中的状态字段，修改为已报运（2）            Contract contract = contractDao.selectByPrimaryKey(cId);            contract.setState(2);            contractDao.updateByPrimaryKeySelective(contract);            //------------------------------------------------------------合同货物(商品)            //根据合同id查找所有的合同下的货物            ProductExample productExample = new ProductExample();            ProductExample.Criteria productCriteria = productExample.createCriteria();            productCriteria.andContractIdEqualTo(cId);            List<Product> products = productDao.selectByExample(productExample);            //key为货物id，value：为商品id//为了商品附件添加（所属商品id）字段            Map<String,String> map = new HashMap<>();            for (Product product : products) {                //循环货物集合为报运单添加商品                ExportProduct exportProduct = new ExportProduct();                //将货物内容写进商品中                BeanUtils.copyProperties(product, exportProduct);                //设置id                exportProduct.setId(UUID.randomUUID().toString());                //设置报运单id                exportProduct.setExportId(export.getId());                //计算商品数量                proNum += product.getCnumber();                //设置map集合                map.put(product.getId(), exportProduct.getId());                //保存商品                exportProductDao.insertSelective(exportProduct);            }            //-----------------------------------------------------商品附件            //通过合同id查找货物附件的集合            ExtCproductExample extCproductExample = new ExtCproductExample();            extCproductExample.createCriteria().andContractIdEqualTo(cId);            List<ExtCproduct> extCproducts = extCproductDao.selectByExample(extCproductExample);            for (ExtCproduct extCproduct : extCproducts) {                //循环附件为商品添加附件                ExtEproduct extEproduct = new ExtEproduct();                //将货物附件内容复制到商品附件中                BeanUtils.copyProperties(extCproduct, extEproduct);                //为商品附件添加id                extEproduct.setId(UUID.randomUUID().toString());                //为商品附件添加报运单id                extEproduct.setExportId(export.getId());                //从map中取出商品id为附件添加                String exportProductId = map.get(extCproduct.getContractProductId());                extEproduct.setExportProductId(exportProductId);                //计算商品附件数量                extNum += extCproduct.getCnumber();                //保存商品附件                extEproductDao.insertSelective(extEproduct);            }        }        //为报运单设置商品数量和商品附件数量        export.setProNum(proNum);        export.setExtNum(extNum);        //保存报运单        exportDao.insertSelective(export);    }    @Override    public void update(Export export) {        //修改报运单        exportDao.updateByPrimaryKeySelective(export);        //从export中获取报运商品集合循环修改商品        List<ExportProduct> exportProducts = export.getExportProducts();        if (exportProducts != null) {            for (ExportProduct exportProduct : exportProducts) {                exportProductDao.updateByPrimaryKeySelective(exportProduct);            }        }    }    @Override    public void delete(String id) {        //删除报运单        //-----------------------------------报运单下的商品        ExportProductExample exportProductExample = new ExportProductExample();        exportProductExample.createCriteria().andExportIdEqualTo(id);        List<ExportProduct> exportProducts = exportProductDao.selectByExample(exportProductExample);        if (exportProducts != null) {            for (ExportProduct exportProduct : exportProducts) {                exportProductDao.deleteByPrimaryKey(exportProduct.getId());            }        }        //------------------------------------报运单下的附件        ExtEproductExample extEproductExample = new ExtEproductExample();        extEproductExample.createCriteria().andExportIdEqualTo(id);        List<ExtEproduct> extEproducts = extEproductDao.selectByExample(extEproductExample);        if (extEproducts != null) {            for (ExtEproduct extEproduct : extEproducts) {                extEproductDao.deleteByPrimaryKey(extEproduct.getId());            }        }        //删除报运单        exportDao.deleteByPrimaryKey(id);    }    @Override    public PageInfo findAll(ExportExample example, int page, int size) {        PageHelper.startPage(page, size);        List<Export> list = exportDao.selectByExample(example);        return new PageInfo(list);    }    @Override    public void updateExportE(ExportResult exportResult) {        //修改报运单的state和remark        Export export = exportDao.selectByPrimaryKey(exportResult.getExportId());        export.setState(exportResult.getState());        export.setRemark(exportResult.getRemark());        //修改商品中的税收字段        Set<ExportProductResult> products = exportResult.getProducts();        for (ExportProductResult product : products) {            ExportProduct exportProduct = new ExportProduct();            exportProduct.setId(product.getExportProductId());            exportProduct.setTax(product.getTax());            exportProductDao.updateByPrimaryKeySelective(exportProduct);        }    }}